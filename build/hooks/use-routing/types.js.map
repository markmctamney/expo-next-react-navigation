{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/hooks/use-routing/types.ts"],"names":[],"mappings":"","sourcesContent":["export type Route<\n  /**\n   * Route string path\n   */\n  R extends string\n> = {\n  routeName: R\n  params?: object\n}\n\ntype GenericRoute = {\n  /**\n   * React navigation route or page name for next.js\n   */\n  routeName: string\n  /**\n   * (optional) Dictionary that will be accessed via `getParams` in the target screen.\n   */\n  params?: object\n  /**\n   * Dictionary that will only be used for web:\n   *\n   * @example\n   *\n   * The following will use the `home` route in react navigation.\n   *\n   * However, it will use the `pages/index.tsx` file for next. Also, it will show up as `domain.com/inbox` in the address bar.\n   *\n   * ```es6\n   * export default function Button() {\n   *   return (\n   *     <Link routeName=\"home\" web={{\n   *      path: '/',\n   *      as: 'inbox'\n   *     }}>\n   *      <Text>Press me</Text>\n   *     </Link>\n   *   )\n   * }\n   * ```\n   */\n  web?: {\n    /**\n     * Alternative path to override routeName on web.\n     */\n    path?: string\n    /**\n     * A custom URL ending to show in the browser address bar instead of the `web.path` or `routeName`.\n     *\n     * Should start with `/`.\n     */\n    as?: string\n  }\n}\n\nexport type NavigateTo = GenericRoute\n\nexport type Params<P> = { params: P }\n\nexport type WebRoute<\n  Path extends string | undefined,\n  As extends string = ''\n> = {\n  web: {\n    path?: Path\n    as?: As\n  }\n}\n\n// export type NavigateTo<R extends string, P, Web> = Route<R> &\n// \tP extends undefined\n// \t? {}\n// \t: Params<P> & Web extends undefined\n// \t? {}\n// \t: WebRoute<Web>\n\nexport type NavigateFunction<NavigateTo> = (route: NavigateTo) => void\nexport type PushFunction<NavigateTo> = (route: NavigateTo) => void\nexport type GetParam<Param extends unknown = undefined> = (\n  param: string\n) => Param\n\nexport type ReturnNav = {\n  navigate: NavigateFunction<GenericRoute>\n  push: PushFunction<GenericRoute>\n  getParam: GetParam\n}\n"]}
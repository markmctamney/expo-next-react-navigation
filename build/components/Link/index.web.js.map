{"version":3,"file":"index.web.js","sourceRoot":"","sources":["../../../src/components/Link/index.web.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,OAAO,EAAmB,MAAM,OAAO,CAAA;AACvD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAwB,MAAM,cAAc,CAAA;AAC/D,OAAO,QAAQ,MAAM,WAAW,CAAA;AAChC,OAAO,KAAK,MAAM,mBAAmB,CAAA;AAIrC;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAC3B,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;IACb,MAAM,EACJ,aAAa,GAAG,KAAK,CAAC,MAAM,EAC5B,KAAK,EACL,MAAM,GAAG,KAAK,CAAC,MAAM,EACrB,QAAQ,EACR,MAAM,GAAG,IAAI,EACb,GAAG,GACJ,GAAG,KAAK,CAAA;IACT,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IACtD,MAAM,OAAO,GAAG,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAA;IACxE,MAAM,QAAQ,GAAG,IAAI,OAAO,IAAI,KAAK,CAAC,SAAS,EAAE,CAAA;IAEjD,MAAM,IAAI,GAAG,OAAO,CAClB,GAAG,EAAE,CAAC,CAAC;QACL,KAAK;QACL,QAAQ;KACT,CAAC,EACF,CAAC,QAAQ,EAAE,KAAK,CAAC,CAClB,CAAA;IACD,OAAO,CACL,CAAC,QAAQ,CACP,QAAQ,CACR,IAAI,aAAa,CAAC,CAClB,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CACZ,QAAQ,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,CACxB,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CACpB,OAAO,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAEtB;QAAA,CAAC,MAAM,CAAC,CAAC,CAAC,CACR,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAkB,CAAC,CACjE;YAAA,CAAC,QAAQ,CACX;UAAA,EAAE,IAAI,CAAC,CACR,CAAC,CAAC,CAAC,CACF,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAkB,CAAC,CACvD;YAAA,CAAC,QAAQ,CACX;UAAA,EAAE,IAAI,CAAC,CACR,CACH;MAAA,EAAE,QAAQ,CAAC,CACZ,CAAA;AACH,CAAC,CACF,CAAA;AAED,eAAe,IAAI,CAAA","sourcesContent":["import React, { useMemo, ClassAttributes } from 'react'\nimport { Text, View, ViewStyle, TextStyle } from 'react-native'\nimport NextLink from 'next/link'\nimport empty from '../../utils/empty'\nimport { LinkProps } from 'expo-navigation-core'\nimport { NextProps, Web } from './types'\n\n/**\n * Link component for react-navigation and nextjs.\n *\n * @param props\n *  - routeName: string\n *  - params?: object\n *  - web?: `{ path?: string; as?: string, replace?: boolean, scroll?: boolean, prefetch?: boolean }`\n *\n * ## Usage\n *\n * ```diff\n * -import { TouchableOpacity } from 'react-native'\n * -...\n * -<TouchableOpacity onPress={() => navigate({ routeName: 'home' })}>\n * -  Press me!\n * - </TouchableOpacity>\n *\n * +import { Link } from 'expo-next-react-navigation'\n * + ...\n * +<Link routeName=\"home\">\n * +  Press me!\n * +</Link>\n *```\n *\n */\nconst Link = React.forwardRef<Text | View, LinkProps<NextProps, Web>>(\n  (props, ref) => {\n    const {\n      nextLinkProps = empty.object,\n      style,\n      params = empty.object,\n      children,\n      isText = true,\n      web,\n    } = props\n    const query = useMemo(() => ({ ...params }), [params])\n    const webPath = web?.path?.[0] === '/' ? web?.path?.slice(1) : web?.path\n    const pathname = `/${webPath ?? props.routeName}`\n\n    const href = useMemo(\n      () => ({\n        query,\n        pathname,\n      }),\n      [pathname, query]\n    )\n    return (\n      <NextLink\n        passHref\n        {...nextLinkProps}\n        href={href}\n        as={web?.as}\n        prefetch={web?.prefetch}\n        scroll={web?.scroll}\n        replace={web?.replace}\n      >\n        {isText ? (\n          <Text ref={ref} accessibilityRole=\"link\" style={style as TextStyle}>\n            {children}\n          </Text>\n        ) : (\n          <View accessibilityRole=\"link\" style={style as ViewStyle}>\n            {children}\n          </View>\n        )}\n      </NextLink>\n    )\n  }\n)\n\nexport default Link\n"]}